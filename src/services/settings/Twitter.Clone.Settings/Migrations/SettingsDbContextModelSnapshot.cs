// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twitter.Clone.Settings.Context;

#nullable disable

namespace Twitter.Clone.Settings.Migrations
{
    [DbContext(typeof(SettingsDbContext))]
    partial class SettingsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("BlockedListSettingSequence");

            modelBuilder.HasSequence("NotificationSettingSequence");

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.BlockedListSetting", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("NEXT VALUE FOR [BlockedListSettingSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<decimal>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.NotificationSetting", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("NEXT VALUE FOR [NotificationSettingSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<decimal>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.BlockedPage", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.BlockedListSetting");

                    b.Property<Guid>("BlockedPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("Id");

                    b.ToTable("BlockedPages");
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.BlockedUser", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.BlockedListSetting");

                    b.Property<Guid>("BlockedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("Id");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.EmailNotificationSetting", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.NotificationSetting");

                    b.Property<bool>("IsDirectMessageActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFollowActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMentionActive")
                        .HasColumnType("bit");

                    b.HasIndex("Id");

                    b.ToTable("EmailNotificationSettings");
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.SmsNotificationSetting", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.NotificationSetting");

                    b.Property<bool>("IsPasswordChangeActive")
                        .HasColumnType("bit");

                    b.HasIndex("Id");

                    b.ToTable("SmsNotificationSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
