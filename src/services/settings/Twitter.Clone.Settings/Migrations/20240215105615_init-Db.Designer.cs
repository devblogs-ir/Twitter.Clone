// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twitter.Clone.Settings.Context;

#nullable disable

namespace Twitter.Clone.Settings.Migrations
{
    [DbContext(typeof(SettingsDbContext))]
    [Migration("20240215105615_init-Db")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.Models.BlockedListSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.Models.NotificationSetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.Models.BlockedPage", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.Models.BlockedListSetting");

                    b.Property<Guid>("BlockedPageId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("BlockedPages");
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.Models.BlockedUser", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.Models.BlockedListSetting");

                    b.Property<Guid>("BlockedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.Models.EmailNotificationSetting", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.Models.NotificationSetting");

                    b.Property<bool>("IsDirectMessageActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFollowActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMentionActive")
                        .HasColumnType("bit");

                    b.ToTable("EmailNotificationSettings");
                });

            modelBuilder.Entity("Twitter.Clone.Settings.Entities.Models.SmsNotificationSetting", b =>
                {
                    b.HasBaseType("Twitter.Clone.Settings.Entities.Models.NotificationSetting");

                    b.Property<bool>("IsPasswordChangeActive")
                        .HasColumnType("bit");

                    b.ToTable("SmsNotificationSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
